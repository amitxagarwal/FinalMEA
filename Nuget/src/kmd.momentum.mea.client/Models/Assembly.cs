// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Kmd.Momentum.Mea.Client.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class Assembly
    {
        /// <summary>
        /// Initializes a new instance of the Assembly class.
        /// </summary>
        public Assembly()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Assembly class.
        /// </summary>
        /// <param name="definedTypes"></param>
        /// <param name="exportedTypes"></param>
        /// <param name="codeBase"></param>
        /// <param name="entryPoint"></param>
        /// <param name="fullName"></param>
        /// <param name="imageRuntimeVersion"></param>
        /// <param name="isDynamic"></param>
        /// <param name="location"></param>
        /// <param name="reflectionOnly"></param>
        /// <param name="isCollectible"></param>
        /// <param name="isFullyTrusted"></param>
        /// <param name="customAttributes"></param>
        /// <param name="escapedCodeBase"></param>
        /// <param name="manifestModule"></param>
        /// <param name="modules"></param>
        /// <param name="globalAssemblyCache"></param>
        /// <param name="hostContext"></param>
        /// <param name="securityRuleSet">Possible values include: 'None',
        /// 'Level1', 'Level2'</param>
        public Assembly(IList<TypeInfo> definedTypes = default(IList<TypeInfo>), IList<Type> exportedTypes = default(IList<Type>), string codeBase = default(string), MethodInfo entryPoint = default(MethodInfo), string fullName = default(string), string imageRuntimeVersion = default(string), bool? isDynamic = default(bool?), string location = default(string), bool? reflectionOnly = default(bool?), bool? isCollectible = default(bool?), bool? isFullyTrusted = default(bool?), IList<CustomAttributeData> customAttributes = default(IList<CustomAttributeData>), string escapedCodeBase = default(string), Module manifestModule = default(Module), IList<Module> modules = default(IList<Module>), bool? globalAssemblyCache = default(bool?), long? hostContext = default(long?), string securityRuleSet = default(string))
        {
            DefinedTypes = definedTypes;
            ExportedTypes = exportedTypes;
            CodeBase = codeBase;
            EntryPoint = entryPoint;
            FullName = fullName;
            ImageRuntimeVersion = imageRuntimeVersion;
            IsDynamic = isDynamic;
            Location = location;
            ReflectionOnly = reflectionOnly;
            IsCollectible = isCollectible;
            IsFullyTrusted = isFullyTrusted;
            CustomAttributes = customAttributes;
            EscapedCodeBase = escapedCodeBase;
            ManifestModule = manifestModule;
            Modules = modules;
            GlobalAssemblyCache = globalAssemblyCache;
            HostContext = hostContext;
            SecurityRuleSet = securityRuleSet;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "definedTypes")]
        public IList<TypeInfo> DefinedTypes { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "exportedTypes")]
        public IList<Type> ExportedTypes { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "codeBase")]
        public string CodeBase { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "entryPoint")]
        public MethodInfo EntryPoint { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "fullName")]
        public string FullName { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "imageRuntimeVersion")]
        public string ImageRuntimeVersion { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isDynamic")]
        public bool? IsDynamic { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "location")]
        public string Location { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "reflectionOnly")]
        public bool? ReflectionOnly { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isCollectible")]
        public bool? IsCollectible { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isFullyTrusted")]
        public bool? IsFullyTrusted { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "customAttributes")]
        public IList<CustomAttributeData> CustomAttributes { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "escapedCodeBase")]
        public string EscapedCodeBase { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "manifestModule")]
        public Module ManifestModule { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "modules")]
        public IList<Module> Modules { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "globalAssemblyCache")]
        public bool? GlobalAssemblyCache { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "hostContext")]
        public long? HostContext { get; private set; }

        /// <summary>
        /// Gets or sets possible values include: 'None', 'Level1', 'Level2'
        /// </summary>
        [JsonProperty(PropertyName = "securityRuleSet")]
        public string SecurityRuleSet { get; set; }

    }
}
