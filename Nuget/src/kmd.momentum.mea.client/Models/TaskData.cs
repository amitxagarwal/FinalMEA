// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Kmd.Momentum.Mea.Client.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class TaskData
    {
        /// <summary>
        /// Initializes a new instance of the TaskData class.
        /// </summary>
        public TaskData()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the TaskData class.
        /// </summary>
        /// <param name="sicknessBenefitType"></param>
        /// <param name="id"></param>
        /// <param name="title"></param>
        /// <param name="description"></param>
        /// <param name="state">Possible values include: 'Active', 'Completed',
        /// 'Canceled', 'Started', 'DeadlineExceeded'</param>
        /// <param name="deadline"></param>
        /// <param name="createdAt"></param>
        /// <param name="updatedAt"></param>
        /// <param name="updatedById"></param>
        /// <param name="createdById"></param>
        /// <param name="stateChangedAt"></param>
        /// <param name="assignee"></param>
        /// <param name="assignedActors"></param>
        /// <param name="subject"></param>
        /// <param name="type"></param>
        /// <param name="relatedEntityId"></param>
        /// <param name="reference"></param>
        /// <param name="participants"></param>
        /// <param name="relatedEntityType"></param>
        public TaskData(string sicknessBenefitType = default(string), System.Guid? id = default(System.Guid?), string title = default(string), string description = default(string), string state = default(string), System.DateTime? deadline = default(System.DateTime?), System.DateTime? createdAt = default(System.DateTime?), System.DateTime? updatedAt = default(System.DateTime?), string updatedById = default(string), string createdById = default(string), System.DateTime? stateChangedAt = default(System.DateTime?), IList<string> assignee = default(IList<string>), IList<AssignedActors> assignedActors = default(IList<AssignedActors>), string subject = default(string), int? type = default(int?), System.Guid? relatedEntityId = default(System.Guid?), Reference reference = default(Reference), IList<Participants> participants = default(IList<Participants>), int? relatedEntityType = default(int?))
        {
            SicknessBenefitType = sicknessBenefitType;
            Id = id;
            Title = title;
            Description = description;
            State = state;
            Deadline = deadline;
            CreatedAt = createdAt;
            UpdatedAt = updatedAt;
            UpdatedById = updatedById;
            CreatedById = createdById;
            StateChangedAt = stateChangedAt;
            Assignee = assignee;
            AssignedActors = assignedActors;
            Subject = subject;
            Type = type;
            RelatedEntityId = relatedEntityId;
            Reference = reference;
            Participants = participants;
            RelatedEntityType = relatedEntityType;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "sicknessBenefitType")]
        public string SicknessBenefitType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public System.Guid? Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "title")]
        public string Title { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'Active', 'Completed',
        /// 'Canceled', 'Started', 'DeadlineExceeded'
        /// </summary>
        [JsonProperty(PropertyName = "state")]
        public string State { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "deadline")]
        public System.DateTime? Deadline { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "createdAt")]
        public System.DateTime? CreatedAt { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "updatedAt")]
        public System.DateTime? UpdatedAt { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "updatedById")]
        public string UpdatedById { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "createdById")]
        public string CreatedById { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "stateChangedAt")]
        public System.DateTime? StateChangedAt { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "assignee")]
        public IList<string> Assignee { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "assignedActors")]
        public IList<AssignedActors> AssignedActors { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "subject")]
        public string Subject { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public int? Type { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "relatedEntityId")]
        public System.Guid? RelatedEntityId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "reference")]
        public Reference Reference { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "participants")]
        public IList<Participants> Participants { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "relatedEntityType")]
        public int? RelatedEntityType { get; set; }

    }
}
