// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Kmd.Momentum.Mea.Client
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for InternalClient.
    /// </summary>
    public static partial class InternalClientExtensions
    {
            /// <summary>
            /// Get all the  caseworkers
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pageNumber'>
            /// The PageNumber to access the records from Core system. Minimum Value is 0
            /// </param>
            public static object GetAllCaseworkers(this IInternalClient operations, int? pageNumber = 0)
            {
                return operations.GetAllCaseworkersAsync(pageNumber).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all the  caseworkers
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pageNumber'>
            /// The PageNumber to access the records from Core system. Minimum Value is 0
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetAllCaseworkersAsync(this IInternalClient operations, int? pageNumber = 0, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllCaseworkersWithHttpMessagesAsync(pageNumber, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get caseworkers in Momentum with ID
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='caseworkerId'>
            /// The caseworker id to access the records from Core system.
            /// </param>
            public static object GetCaseworkerById(this IInternalClient operations, System.Guid caseworkerId)
            {
                return operations.GetCaseworkerByIdAsync(caseworkerId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get caseworkers in Momentum with ID
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='caseworkerId'>
            /// The caseworker id to access the records from Core system.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetCaseworkerByIdAsync(this IInternalClient operations, System.Guid caseworkerId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCaseworkerByIdWithHttpMessagesAsync(caseworkerId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all tasks for the caseworkers
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='caseworkerId'>
            /// The caseworker id to access the records from Core system.
            /// </param>
            /// <param name='pageNumber'>
            /// The PageNumber to access the records from Core system. Minimum Value is 0
            /// </param>
            public static object GetTasksbyCaseworker(this IInternalClient operations, System.Guid caseworkerId, int? pageNumber = 0)
            {
                return operations.GetTasksbyCaseworkerAsync(caseworkerId, pageNumber).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all tasks for the caseworkers
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='caseworkerId'>
            /// The caseworker id to access the records from Core system.
            /// </param>
            /// <param name='pageNumber'>
            /// The PageNumber to access the records from Core system. Minimum Value is 0
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetTasksbyCaseworkerAsync(this IInternalClient operations, System.Guid caseworkerId, int? pageNumber = 0, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTasksbyCaseworkerWithHttpMessagesAsync(caseworkerId, pageNumber, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all active citizens
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pageNumber'>
            /// The PageNumber to access the records from Core system. Minimum Value is 1
            /// </param>
            public static object GetAllActiveCitizens(this IInternalClient operations, int? pageNumber = 1)
            {
                return operations.GetAllActiveCitizensAsync(pageNumber).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all active citizens
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pageNumber'>
            /// The PageNumber to access the records from Core system. Minimum Value is 1
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetAllActiveCitizensAsync(this IInternalClient operations, int? pageNumber = 1, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllActiveCitizensWithHttpMessagesAsync(pageNumber, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Citizen in Momentum by CPR
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cprNumber'>
            /// The CPR number to search the record in the Core system
            /// </param>
            public static object GetCitizenByCpr(this IInternalClient operations, string cprNumber)
            {
                return operations.GetCitizenByCprAsync(cprNumber).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Citizen in Momentum by CPR
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cprNumber'>
            /// The CPR number to search the record in the Core system
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetCitizenByCprAsync(this IInternalClient operations, string cprNumber, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCitizenByCprWithHttpMessagesAsync(cprNumber, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Citizen in Momentum by ID
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='citizenId'>
            /// The Citizen ID or Momentum Id to search the record in the Core system
            /// </param>
            public static object GetCitizenById(this IInternalClient operations, System.Guid citizenId)
            {
                return operations.GetCitizenByIdAsync(citizenId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Citizen in Momentum by ID
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='citizenId'>
            /// The Citizen ID or Momentum Id to search the record in the Core system
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetCitizenByIdAsync(this IInternalClient operations, System.Guid citizenId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCitizenByIdWithHttpMessagesAsync(citizenId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a Journal Note with attachment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The requestmodel to save as a journal note record, in the Core system
            /// </param>
            /// <param name='momentumCitizenId'>
            /// The MomentumCitizenID or CitizenId to Create the journal note record in the
            /// Core system
            /// </param>
            public static ProblemDetails CreateJournalNote(this IInternalClient operations, JournalNoteRequestModel body, System.Guid momentumCitizenId)
            {
                return operations.CreateJournalNoteAsync(body, momentumCitizenId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a Journal Note with attachment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The requestmodel to save as a journal note record, in the Core system
            /// </param>
            /// <param name='momentumCitizenId'>
            /// The MomentumCitizenID or CitizenId to Create the journal note record in the
            /// Core system
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProblemDetails> CreateJournalNoteAsync(this IInternalClient operations, JournalNoteRequestModel body, System.Guid momentumCitizenId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateJournalNoteWithHttpMessagesAsync(body, momentumCitizenId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Health
            /// </summary>
            /// <remarks>
            /// Provides an indication about the health of the API
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static HealthReport HealthReady(this IInternalClient operations)
            {
                return operations.HealthReadyAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Health
            /// </summary>
            /// <remarks>
            /// Provides an indication about the health of the API
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HealthReport> HealthReadyAsync(this IInternalClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.HealthReadyWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Health
            /// </summary>
            /// <remarks>
            /// Provides an indication about the health of the API
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static HealthReport HealthLive(this IInternalClient operations)
            {
                return operations.HealthLiveAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Health
            /// </summary>
            /// <remarks>
            /// Provides an indication about the health of the API
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HealthReport> HealthLiveAsync(this IInternalClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.HealthLiveWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static HealthReport HealthLiveDemo(this IInternalClient operations)
            {
                return operations.HealthLiveDemoAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HealthReport> HealthLiveDemoAsync(this IInternalClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.HealthLiveDemoWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update Status
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The request model to update task in the Core system
            /// </param>
            /// <param name='taskId'>
            /// The TaskId to update the task in the Core system
            /// </param>
            public static object UpdateTaskStatus(this IInternalClient operations, TaskUpdateStatus body, System.Guid taskId)
            {
                return operations.UpdateTaskStatusAsync(body, taskId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update Status
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The request model to update task in the Core system
            /// </param>
            /// <param name='taskId'>
            /// The TaskId to update the task in the Core system
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateTaskStatusAsync(this IInternalClient operations, TaskUpdateStatus body, System.Guid taskId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateTaskStatusWithHttpMessagesAsync(body, taskId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
